datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    playlists     Playlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Artist {
    id        String   @id @default(uuid())
    imageUrl  String   @db.VarChar(1000)
    name      String   @db.VarChar(200)
    songs     Song[]   @relation("ArtistSongs")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Song {
    id        String            @id @default(uuid())
    name      String            @db.VarChar(200)
    chords    Json
    lyrics    Json
    artist    Artist            @relation(name: "ArtistSongs", fields: [artistId], references: [id])
    artistId  String
    playlists SongsOnPlaylist[]
    videoId   String?
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    @@index([artistId])
}

model Playlist {
    id        String            @id @default(uuid())
    name      String            @db.VarChar(200)
    songs     SongsOnPlaylist[]
    owner     User              @relation(fields: [ownerId], references: [id])
    ownerId   String
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    @@index([ownerId])
}

model SongsOnPlaylist {
    id         String   @id @default(uuid())
    playlist   Playlist @relation(fields: [playlistId], references: [id])
    playlistId String
    song       Song     @relation(fields: [songId], references: [id])
    songId     String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([playlistId])
    @@index([songId])
}
